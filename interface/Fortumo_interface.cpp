/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "Fortumo.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       void(*Fortumo_SetLoggingEnabled_t)(s3eBool loggingEnabled);
typedef       void(*Fortumo_SetStateChangeListener_t)(Fortumo_Payment_Callback callback, void* userData);
typedef       void(*Fortumo_FindPayment_t)(Fortumo_PaymentRequest* request, Fortumo_Payment_Callback callback, void* userData);
typedef       void(*Fortumo_MakePayment_t)(Fortumo_PaymentRequest* request, Fortumo_Payment_Callback callback, void* userData);
typedef Fortumo_PaymentRequest*(*Fortumo_PaymentRequest_Create_t)();
typedef       void(*Fortumo_PaymentRequest_SetService_t)(Fortumo_PaymentRequest* request, const char* serviceId, const char* appSecret);
typedef       void(*Fortumo_PaymentRequest_SetConsumable_t)(Fortumo_PaymentRequest* request, s3eBool consumable);
typedef       void(*Fortumo_PaymentRequest_SetCreditsMultiplier_t)(Fortumo_PaymentRequest* request, double value);
typedef       void(*Fortumo_PaymentRequest_SetDisplayString_t)(Fortumo_PaymentRequest* request, const char* value);
typedef       void(*Fortumo_PaymentRequest_SetIcon_t)(Fortumo_PaymentRequest* request, s3e_int32_t iconId);
typedef       void(*Fortumo_PaymentRequest_SetPriceAmount_t)(Fortumo_PaymentRequest* request, const char* value);
typedef       void(*Fortumo_PaymentRequest_SetPriceCurrency_t)(Fortumo_PaymentRequest* request, const char* value);
typedef       void(*Fortumo_PaymentRequest_SetProductName_t)(Fortumo_PaymentRequest* request, const char* value);
typedef       void(*Fortumo_PaymentRequest_Delete_t)(Fortumo_PaymentRequest* request);
typedef Fortumo_BillingStatus(*Fortumo_PaymentResponse_GetBillingStatus_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetCreditAmount_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetCreditName_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetPaymentCode_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetPriceAmount_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetPriceCurrency_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetProductName_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetMessageId_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetServiceId_t)(Fortumo_PaymentResponse* response);
typedef const char*(*Fortumo_PaymentResponse_GetUserId_t)(Fortumo_PaymentResponse* response);
typedef       void(*Fortumo_PaymentResponse_Delete_t)(Fortumo_PaymentResponse* response);
typedef Fortumo_ServiceRequest*(*Fortumo_ServiceRequest_Create_t)();
typedef       void(*Fortumo_ServiceRequest_SetService_t)(Fortumo_ServiceRequest* request, const char* serviceId, const char* appSecret);
typedef       void(*Fortumo_ServiceRequest_SetTimeout_t)(Fortumo_ServiceRequest* request, s3e_int32_t timeout);
typedef       void(*Fortumo_ServiceRequest_Delete_t)(Fortumo_ServiceRequest* request);
typedef const char*(*Fortumo_ServiceResponse_GetServiceId_t)(Fortumo_ServiceResponse* response);
typedef Fortumo_ServiceStatus(*Fortumo_ServiceResponse_GetServiceStatus_t)(Fortumo_ServiceResponse* response);
typedef       void(*Fortumo_ServiceResponse_Delete_t)(Fortumo_ServiceResponse* response);
typedef       void(*Fortumo_FindService_t)(Fortumo_ServiceRequest* request, Fortumo_Service_Callback callback, void* userData);

/**
 * struct that gets filled in by FortumoRegister
 */
typedef struct FortumoFuncs
{
    Fortumo_SetLoggingEnabled_t m_Fortumo_SetLoggingEnabled;
    Fortumo_SetStateChangeListener_t m_Fortumo_SetStateChangeListener;
    Fortumo_FindPayment_t m_Fortumo_FindPayment;
    Fortumo_MakePayment_t m_Fortumo_MakePayment;
    Fortumo_PaymentRequest_Create_t m_Fortumo_PaymentRequest_Create;
    Fortumo_PaymentRequest_SetService_t m_Fortumo_PaymentRequest_SetService;
    Fortumo_PaymentRequest_SetConsumable_t m_Fortumo_PaymentRequest_SetConsumable;
    Fortumo_PaymentRequest_SetCreditsMultiplier_t m_Fortumo_PaymentRequest_SetCreditsMultiplier;
    Fortumo_PaymentRequest_SetDisplayString_t m_Fortumo_PaymentRequest_SetDisplayString;
    Fortumo_PaymentRequest_SetIcon_t m_Fortumo_PaymentRequest_SetIcon;
    Fortumo_PaymentRequest_SetPriceAmount_t m_Fortumo_PaymentRequest_SetPriceAmount;
    Fortumo_PaymentRequest_SetPriceCurrency_t m_Fortumo_PaymentRequest_SetPriceCurrency;
    Fortumo_PaymentRequest_SetProductName_t m_Fortumo_PaymentRequest_SetProductName;
    Fortumo_PaymentRequest_Delete_t m_Fortumo_PaymentRequest_Delete;
    Fortumo_PaymentResponse_GetBillingStatus_t m_Fortumo_PaymentResponse_GetBillingStatus;
    Fortumo_PaymentResponse_GetCreditAmount_t m_Fortumo_PaymentResponse_GetCreditAmount;
    Fortumo_PaymentResponse_GetCreditName_t m_Fortumo_PaymentResponse_GetCreditName;
    Fortumo_PaymentResponse_GetPaymentCode_t m_Fortumo_PaymentResponse_GetPaymentCode;
    Fortumo_PaymentResponse_GetPriceAmount_t m_Fortumo_PaymentResponse_GetPriceAmount;
    Fortumo_PaymentResponse_GetPriceCurrency_t m_Fortumo_PaymentResponse_GetPriceCurrency;
    Fortumo_PaymentResponse_GetProductName_t m_Fortumo_PaymentResponse_GetProductName;
    Fortumo_PaymentResponse_GetMessageId_t m_Fortumo_PaymentResponse_GetMessageId;
    Fortumo_PaymentResponse_GetServiceId_t m_Fortumo_PaymentResponse_GetServiceId;
    Fortumo_PaymentResponse_GetUserId_t m_Fortumo_PaymentResponse_GetUserId;
    Fortumo_PaymentResponse_Delete_t m_Fortumo_PaymentResponse_Delete;
    Fortumo_ServiceRequest_Create_t m_Fortumo_ServiceRequest_Create;
    Fortumo_ServiceRequest_SetService_t m_Fortumo_ServiceRequest_SetService;
    Fortumo_ServiceRequest_SetTimeout_t m_Fortumo_ServiceRequest_SetTimeout;
    Fortumo_ServiceRequest_Delete_t m_Fortumo_ServiceRequest_Delete;
    Fortumo_ServiceResponse_GetServiceId_t m_Fortumo_ServiceResponse_GetServiceId;
    Fortumo_ServiceResponse_GetServiceStatus_t m_Fortumo_ServiceResponse_GetServiceStatus;
    Fortumo_ServiceResponse_Delete_t m_Fortumo_ServiceResponse_Delete;
    Fortumo_FindService_t m_Fortumo_FindService;
} FortumoFuncs;

static FortumoFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xbab0f5b1, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: Fortumo");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xbab0f5b1, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool FortumoAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

void Fortumo_SetLoggingEnabled(s3eBool loggingEnabled)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[0] func: Fortumo_SetLoggingEnabled"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_SetLoggingEnabled(loggingEnabled);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_SetStateChangeListener(Fortumo_Payment_Callback callback, void* userData)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[1] func: Fortumo_SetStateChangeListener"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_SetStateChangeListener(callback, userData);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_FindPayment(Fortumo_PaymentRequest* request, Fortumo_Payment_Callback callback, void* userData)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[2] func: Fortumo_FindPayment"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_FindPayment(request, callback, userData);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_MakePayment(Fortumo_PaymentRequest* request, Fortumo_Payment_Callback callback, void* userData)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[3] func: Fortumo_MakePayment"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_MakePayment(request, callback, userData);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

Fortumo_PaymentRequest* Fortumo_PaymentRequest_Create()
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[4] func: Fortumo_PaymentRequest_Create"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    Fortumo_PaymentRequest* ret = g_Ext.m_Fortumo_PaymentRequest_Create();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void Fortumo_PaymentRequest_SetService(Fortumo_PaymentRequest* request, const char* serviceId, const char* appSecret)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[5] func: Fortumo_PaymentRequest_SetService"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_SetService(request, serviceId, appSecret);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_PaymentRequest_SetConsumable(Fortumo_PaymentRequest* request, s3eBool consumable)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[6] func: Fortumo_PaymentRequest_SetConsumable"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_SetConsumable(request, consumable);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_PaymentRequest_SetCreditsMultiplier(Fortumo_PaymentRequest* request, double value)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[7] func: Fortumo_PaymentRequest_SetCreditsMultiplier"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_SetCreditsMultiplier(request, value);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_PaymentRequest_SetDisplayString(Fortumo_PaymentRequest* request, const char* value)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[8] func: Fortumo_PaymentRequest_SetDisplayString"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_SetDisplayString(request, value);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_PaymentRequest_SetIcon(Fortumo_PaymentRequest* request, s3e_int32_t iconId)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[9] func: Fortumo_PaymentRequest_SetIcon"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_SetIcon(request, iconId);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_PaymentRequest_SetPriceAmount(Fortumo_PaymentRequest* request, const char* value)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[10] func: Fortumo_PaymentRequest_SetPriceAmount"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_SetPriceAmount(request, value);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_PaymentRequest_SetPriceCurrency(Fortumo_PaymentRequest* request, const char* value)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[11] func: Fortumo_PaymentRequest_SetPriceCurrency"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_SetPriceCurrency(request, value);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_PaymentRequest_SetProductName(Fortumo_PaymentRequest* request, const char* value)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[12] func: Fortumo_PaymentRequest_SetProductName"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_SetProductName(request, value);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_PaymentRequest_Delete(Fortumo_PaymentRequest* request)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[13] func: Fortumo_PaymentRequest_Delete"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentRequest_Delete(request);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

Fortumo_BillingStatus Fortumo_PaymentResponse_GetBillingStatus(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[14] func: Fortumo_PaymentResponse_GetBillingStatus"));

    if (!_extLoad())
        return Fortumo_BillingStatus_NotSent;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    Fortumo_BillingStatus ret = g_Ext.m_Fortumo_PaymentResponse_GetBillingStatus(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetCreditAmount(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[15] func: Fortumo_PaymentResponse_GetCreditAmount"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetCreditAmount(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetCreditName(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[16] func: Fortumo_PaymentResponse_GetCreditName"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetCreditName(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetPaymentCode(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[17] func: Fortumo_PaymentResponse_GetPaymentCode"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetPaymentCode(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetPriceAmount(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[18] func: Fortumo_PaymentResponse_GetPriceAmount"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetPriceAmount(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetPriceCurrency(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[19] func: Fortumo_PaymentResponse_GetPriceCurrency"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetPriceCurrency(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetProductName(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[20] func: Fortumo_PaymentResponse_GetProductName"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetProductName(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetMessageId(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[21] func: Fortumo_PaymentResponse_GetMessageId"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetMessageId(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetServiceId(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[22] func: Fortumo_PaymentResponse_GetServiceId"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetServiceId(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* Fortumo_PaymentResponse_GetUserId(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[23] func: Fortumo_PaymentResponse_GetUserId"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_PaymentResponse_GetUserId(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void Fortumo_PaymentResponse_Delete(Fortumo_PaymentResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[24] func: Fortumo_PaymentResponse_Delete"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_PaymentResponse_Delete(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

Fortumo_ServiceRequest* Fortumo_ServiceRequest_Create()
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[25] func: Fortumo_ServiceRequest_Create"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    Fortumo_ServiceRequest* ret = g_Ext.m_Fortumo_ServiceRequest_Create();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void Fortumo_ServiceRequest_SetService(Fortumo_ServiceRequest* request, const char* serviceId, const char* appSecret)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[26] func: Fortumo_ServiceRequest_SetService"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_ServiceRequest_SetService(request, serviceId, appSecret);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_ServiceRequest_SetTimeout(Fortumo_ServiceRequest* request, s3e_int32_t timeout)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[27] func: Fortumo_ServiceRequest_SetTimeout"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_ServiceRequest_SetTimeout(request, timeout);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_ServiceRequest_Delete(Fortumo_ServiceRequest* request)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[28] func: Fortumo_ServiceRequest_Delete"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_ServiceRequest_Delete(request);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

const char* Fortumo_ServiceResponse_GetServiceId(Fortumo_ServiceResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[29] func: Fortumo_ServiceResponse_GetServiceId"));

    if (!_extLoad())
        return NULL;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_Fortumo_ServiceResponse_GetServiceId(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

Fortumo_ServiceStatus Fortumo_ServiceResponse_GetServiceStatus(Fortumo_ServiceResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[30] func: Fortumo_ServiceResponse_GetServiceStatus"));

    if (!_extLoad())
        return Fortumo_ServiceStatus_Unknown;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    Fortumo_ServiceStatus ret = g_Ext.m_Fortumo_ServiceResponse_GetServiceStatus(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void Fortumo_ServiceResponse_Delete(Fortumo_ServiceResponse* response)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[31] func: Fortumo_ServiceResponse_Delete"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_ServiceResponse_Delete(response);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void Fortumo_FindService(Fortumo_ServiceRequest* request, Fortumo_Service_Callback callback, void* userData)
{
    IwTrace(FORTUMO_VERBOSE, ("calling Fortumo[32] func: Fortumo_FindService"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_Fortumo_FindService(request, callback, userData);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
