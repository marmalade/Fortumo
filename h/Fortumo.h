/*
 * Copyright (C) 2001-2012 Ideaworks3D Ltd.
 * All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Ideaworks Labs.
 * This file consists of source code released by Ideaworks Labs under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_FORTUMO_H
#define S3E_EXT_FORTUMO_H

#include <s3eTypes.h>
#include <vector>
#include <string>

/**
 * Defines message status. Check Fortumo Java documentation for full explanation.
*/
typedef enum FortumoMessageStatus {
	FORTUMO_MESSAGE_STATUS_BILLED=0,
	FORTUMO_MESSAGE_STATUS_FAILED=1,
	FORTUMO_MESSAGE_STATUS_NOT_SENT=2,
	FORTUMO_MESSAGE_STATUS_PENDING=3
} FortumoMessageStatus ;

/**
 * Defines Fortumo response for payment attempt.
*/
struct ReceiveInfo {
	FortumoMessageStatus billingStatus;
	char creditAmount[256];
	char creditName[256];
	long messageId;
	char paymentCode[256];
	char priceAmount[256];
	char priceCurrency[256];
	char productName[256];
	char serviceId[256];
	char SKU[256];
	char userId[256];
};
/**
 * Defines callbacks.
*/
typedef enum FortumoCallback {
	FORTUMO_RECEIVE_CALLBACK,
	FORTUMO_CALLBACK_MAX,
} FortumoCallback;
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the Fortumo extension is available.
 */
s3eBool FortumoAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref FortumoCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *
 * @see FortumoUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref FortumoCallback enum.
 */
s3eResult FortumoRegister(FortumoCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the FortumoCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see FortumoRegister
 */
s3eResult FortumoUnRegister(FortumoCallback cbid, s3eCallback fn);

/**
 * Running this function starts SMS payment. It opens Fortumo's dialog box and starts Fortumo's Activity.
 *
 * To receive info about payment register FORTUMO_RECEIVE_CALLBACK. systemData passed to callback is ReceiveInfo structure.
 *
 * @param isConsumable true if service is consumable good
 * @param creditsMultiplier multiplier in percent. Should be set for 100 if you want to give normal amount of credits.
 * @param displayString String displayed as pop-up title.
 * @param productName Product name - as specified in Fortumo portal.
 * @param serviceId Service Id - shown at Fortumo portal.
 * @param serviceSecret Service secret - shown at Fortumo portal.
 * @param SKU SKU used by service user.
*/
s3eResult FortumoRequestPayment(bool isConsumable,int creditsMultiplier,const char* displayString,const char* productName,const char* serviceId,const char* serviceSecret,const char* SKU);

/**
 * Terminates Fortumo.
*/
void FortumoTerminate();

/**
 * Initialises Fortumo.
*/
s3eResult FortumoInit();

S3E_END_C_DECL



#endif /* !S3E_EXT_FORTUMO_H */
